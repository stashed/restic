name: test
on:
  # run tests on push to master, but not when other branches are pushed to
  push:
    branches:
      - master

  # run tests for all pull requests
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        # list of jobs to run:
        include:
          - job_name: Windows
            go: 1.16.x
            os: windows-latest

          - job_name: macOS
            go: 1.16.x
            os: macOS-latest
            test_fuse: false

          - job_name: Linux
            go: 1.16.x
            os: ubuntu-latest
            test_cloud_backends: true
            test_fuse: true
            check_changelog: true

          - job_name: Linux
            go: 1.15.x
            os: ubuntu-latest
            test_fuse: true

          - job_name: Linux
            go: 1.14.x
            os: ubuntu-latest
            test_fuse: true

          - job_name: Linux
            go: 1.13.x
            os: ubuntu-latest
            test_fuse: true

    name: ${{ matrix.job_name }} Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}

    env:
      GOPROXY: https://proxy.golang.org

    steps:
      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Get programs (Linux/macOS)
        run: |
          echo "build Go tools"
          go get github.com/restic/rest-server/...

          echo "install minio server"
          mkdir $HOME/bin
          if [ "$RUNNER_OS" == "macOS" ]; then
            wget --no-verbose -O $HOME/bin/minio https://dl.minio.io/server/minio/release/darwin-amd64/minio
          else
            wget --no-verbose -O $HOME/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio
          fi
          chmod 755 $HOME/bin/minio

          echo "install rclone"
          if [ "$RUNNER_OS" == "macOS" ]; then
            wget --no-verbose -O rclone.zip https://downloads.rclone.org/rclone-current-osx-amd64.zip
          else
            wget --no-verbose -O rclone.zip https://downloads.rclone.org/rclone-current-linux-amd64.zip
          fi
          unzip rclone.zip
          cp rclone*/rclone $HOME/bin
          chmod 755 $HOME/bin/rclone
          rm -rf rclone*

          # add $HOME/bin to path ($GOBIN was already added to the path by setup-go@v2)
          echo $HOME/bin >> $GITHUB_PATH
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

      - name: Get programs (Windows)
        shell: powershell
        run: |
          $ProgressPreference = 'SilentlyContinue'

          echo "build Go tools"
          go get github.com/restic/rest-server/...

          echo "install minio server"
          mkdir $Env:USERPROFILE/bin
          Invoke-WebRequest https://dl.minio.io/server/minio/release/windows-amd64/minio.exe -OutFile $Env:USERPROFILE/bin/minio.exe

          echo "install rclone"
          Invoke-WebRequest https://downloads.rclone.org/rclone-current-windows-amd64.zip -OutFile rclone.zip

          unzip rclone.zip
          copy rclone*/rclone.exe $Env:USERPROFILE/bin

          # add $USERPROFILE/bin to path ($GOBIN was already added to the path by setup-go@v2)
          echo $Env:USERPROFILE\bin >> $Env:GITHUB_PATH

          echo "install tar"
          cd $env:USERPROFILE
          mkdir tar
          cd tar

          # install exactly these versions of tar and the libraries, other combinations might not work!

          Invoke-WebRequest https://github.com/restic/test-assets/raw/master/tar-1.13-1-bin.zip -OutFile tar.zip
          unzip tar.zip
          Invoke-WebRequest https://github.com/restic/test-assets/raw/master/libintl-0.11.5-2-bin.zip -OutFile libintl.zip
          unzip libintl.zip
          Invoke-WebRequest https://github.com/restic/test-assets/raw/master/libiconv-1.8-1-bin.zip -OutFile libiconv.zip
          unzip libiconv.zip

          # add $USERPROFILE/tar/bin to path
          echo $Env:USERPROFILE\tar\bin >> $Env:GITHUB_PATH
        if: matrix.os == 'windows-latest'

      - name: Check out code
        uses: actions/checkout@v2

      - name: Build with build.go
        run: |
          go run build.go

      - name: Run local Tests
        env:
          RESTIC_TEST_FUSE: ${{ matrix.test_fuse }}
        run: |
          go test -cover ./...

      - name: Test cloud backends
        env:
          # fail if any of the following tests cannot be run
          RESTIC_TEST_DISALLOW_SKIP: "restic/backend/rest.TestBackendREST,\
            restic/backend/sftp.TestBackendSFTP,\
            restic/backend/s3.TestBackendMinio,\
            restic/backend/rclone.TestBackendRclone,\
            restic/backend/s3.TestBackendS3,\
            restic/backend/swift.TestBackendSwift,\
            restic/backend/b2.TestBackendB2,\
            restic/backend/gs.TestBackendGS,\
            restic/backend/azure.TestBackendAzure"
        run: |
          # write test credentials into .env file
          echo $RESTIC_TEST_CREDENTIALS >> $(pwd)/.env
          # export the env variables from env
          source $(pwd)/.env
          # prepare credentials for Google Cloud Storage tests in a temp file
          export GOOGLE_APPLICATION_CREDENTIALS=$(mktemp --tmpdir restic-gcs-auth-XXXXXXX)
          echo $RESTIC_TEST_GS_APPLICATION_CREDENTIALS_B64 | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
          go test -cover -parallel 4 ./internal/backend/...

        # only run cloud backend tests for pull requests from and pushes to our
        # own repo, otherwise the secrets are not available
        if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && matrix.test_cloud_backends

      - name: Check changelog files with calens
        run: |
          echo "install calens"
          go get github.com/restic/calens

          echo "check changelog files"
          calens
        if: matrix.check_changelog
